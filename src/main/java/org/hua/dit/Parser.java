
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.hua.dit;

import java_cup.runtime.Symbol;
import org.hua.dit.ast.*;
import org.hua.dit.types.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\011\000\002\031\002\000\002\031\005" +
    "\000\002\005\002\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\007\003\000\002\007\006\000\002\010\004\000\002\010" +
    "\004\000\002\011\003\000\002\011\005\000\002\011\006" +
    "\000\002\024\002\000\002\024\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\010\000\002" +
    "\025\002\000\002\025\004\000\002\026\004\000\002\014" +
    "\004\000\002\015\003\000\002\015\006\000\002\015\003" +
    "\000\002\015\004\000\002\015\010\000\002\015\006\000" +
    "\002\015\006\000\002\015\004\000\002\015\005\000\002" +
    "\015\003\000\002\016\005\000\002\023\002\000\002\023" +
    "\004\000\002\017\005\000\002\017\006\000\002\022\003" +
    "\000\002\022\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\006\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\005\000\002\032" +
    "\004\000\002\032\004\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\021\005\000\002\021\004\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\011\004\001\002\000\004\057\164\001" +
    "\002\000\004\002\163\001\002\000\004\002\000\001\002" +
    "\000\010\011\uffee\023\uffee\044\uffee\001\002\000\010\011" +
    "\004\023\020\044\011\001\002\000\024\012\uffd9\021\uffd9" +
    "\023\uffd9\024\uffd9\044\uffd9\045\uffd9\047\uffd9\053\uffd9\057" +
    "\uffd9\001\002\000\010\011\uffed\023\uffed\044\uffed\001\002" +
    "\000\010\011\uffea\023\uffea\044\uffea\001\002\000\012\002" +
    "\uffff\011\uffff\023\uffff\044\uffff\001\002\000\012\011\uffee" +
    "\023\uffee\044\uffee\047\037\001\002\000\010\011\uffeb\023" +
    "\uffeb\044\uffeb\001\002\000\010\011\uffec\023\uffec\044\uffec" +
    "\001\002\000\004\057\021\001\002\000\006\046\uffe8\050" +
    "\uffe8\001\002\000\006\046\023\050\024\001\002\000\004" +
    "\057\036\001\002\000\006\005\030\013\026\001\002\000" +
    "\006\046\uffe7\050\uffe7\001\002\000\016\011\ufff7\023\ufff7" +
    "\041\ufff7\042\ufff7\044\ufff7\047\ufff7\001\002\000\006\042" +
    "\033\047\032\001\002\000\016\011\ufff6\023\ufff6\041\ufff6" +
    "\042\ufff6\044\ufff6\047\ufff6\001\002\000\006\042\ufff5\047" +
    "\ufff5\001\002\000\030\010\uffe9\011\uffe9\012\uffe9\021\uffe9" +
    "\023\uffe9\024\uffe9\044\uffe9\045\uffe9\047\uffe9\053\uffe9\057" +
    "\uffe9\001\002\000\004\060\034\001\002\000\004\043\035" +
    "\001\002\000\006\042\ufff4\047\ufff4\001\002\000\006\046" +
    "\uffe6\050\uffe6\001\002\000\010\011\uffe5\023\uffe5\044\uffe5" +
    "\001\002\000\024\012\052\021\043\023\020\024\042\044" +
    "\011\045\054\047\050\053\041\057\053\001\002\000\054" +
    "\004\uffd2\006\uffd2\007\uffd2\014\uffd2\017\uffd2\022\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\046\uffd2\047" +
    "\uffd2\051\uffd2\001\002\000\024\015\116\025\060\026\061" +
    "\040\115\053\041\057\053\060\062\061\056\064\066\001" +
    "\002\000\024\025\060\026\061\040\057\047\155\053\041" +
    "\057\053\060\062\061\056\064\066\001\002\000\024\012" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\044\uffd8\045\uffd8\047\uffd8" +
    "\053\uffd8\057\uffd8\001\002\000\026\010\uffe2\012\uffe2\021" +
    "\uffe2\023\uffe2\024\uffe2\044\uffe2\045\uffe2\047\uffe2\053\uffe2" +
    "\057\uffe2\001\002\000\026\010\uffdb\012\uffdb\021\uffdb\023" +
    "\uffdb\024\uffdb\044\uffdb\045\uffdb\047\uffdb\053\uffdb\057\uffdb" +
    "\001\002\000\006\042\106\051\152\001\002\000\026\010" +
    "\uffe4\012\uffe4\021\uffe4\023\uffe4\024\uffe4\044\uffe4\045\uffe4" +
    "\047\uffe4\053\uffe4\057\uffe4\001\002\000\004\047\151\001" +
    "\002\000\024\015\116\025\060\026\061\040\115\053\041" +
    "\057\053\060\062\061\056\064\066\001\002\000\056\004" +
    "\uffd3\006\uffd3\007\uffd3\014\uffd3\017\uffd3\022\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\055\041\uffd3\042\uffd3\043\uffd3\046\uffd3" +
    "\047\uffd3\051\uffd3\001\002\000\032\002\uffda\010\uffda\011" +
    "\uffda\012\uffda\021\uffda\023\uffda\024\uffda\044\uffda\045\uffda" +
    "\047\uffda\053\uffda\057\uffda\001\002\000\024\025\060\026" +
    "\061\040\057\041\064\053\041\057\053\060\062\061\056" +
    "\064\066\001\002\000\050\004\uffcf\006\uffcf\007\uffcf\014" +
    "\uffcf\017\uffcf\022\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf" +
    "\032\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\041\uffcf\043" +
    "\uffcf\046\uffcf\047\uffcf\001\002\000\022\025\060\026\061" +
    "\040\057\053\041\057\053\060\062\061\056\064\066\001" +
    "\002\000\022\025\060\026\061\040\057\053\041\057\053" +
    "\060\062\061\056\064\066\001\002\000\022\025\060\026" +
    "\061\040\057\053\041\057\053\060\062\061\056\064\066" +
    "\001\002\000\050\004\uffd0\006\uffd0\007\uffd0\014\uffd0\017" +
    "\uffd0\022\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\043\uffd0\046" +
    "\uffd0\047\uffd0\001\002\000\052\004\uffce\006\uffce\007\uffce" +
    "\014\uffce\017\uffce\022\uffce\025\uffce\026\uffce\027\uffce\031" +
    "\uffce\032\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041\uffce" +
    "\042\106\043\uffce\046\uffce\047\uffce\001\002\000\050\004" +
    "\uffd7\006\uffd7\007\uffd7\014\uffd7\017\uffd7\022\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\041\uffd7\043\uffd7\046\uffd7\047\uffd7\001\002" +
    "\000\006\041\104\046\103\001\002\000\050\004\uffc4\006" +
    "\uffc4\007\uffc4\014\uffc4\017\uffc4\022\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\041\uffc4\043\uffc4\046\uffc4\047\uffc4\001\002\000\050" +
    "\004\uffcd\006\uffcd\007\uffcd\014\uffcd\017\uffcd\022\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\041\uffcd\043\uffcd\046\uffcd\047\uffcd\001" +
    "\002\000\020\006\075\014\073\025\072\026\074\027\071" +
    "\041\uffd5\046\uffd5\001\002\000\022\025\060\026\061\040" +
    "\057\053\041\057\053\060\062\061\056\064\066\001\002" +
    "\000\022\025\060\026\061\040\057\053\041\057\053\060" +
    "\062\061\056\064\066\001\002\000\022\025\060\026\061" +
    "\040\057\053\041\057\053\060\062\061\056\064\066\001" +
    "\002\000\022\025\060\026\061\040\057\053\041\057\053" +
    "\060\062\061\056\064\066\001\002\000\022\025\060\026" +
    "\061\040\057\053\041\057\053\060\062\061\056\064\066" +
    "\001\002\000\050\004\uffc6\006\uffc6\007\uffc6\014\uffc6\017" +
    "\uffc6\022\uffc6\025\072\026\074\027\uffc6\031\uffc6\032\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\041\uffc6\043\uffc6\046" +
    "\uffc6\047\uffc6\001\002\000\050\004\uffc8\006\uffc8\007\uffc8" +
    "\014\uffc8\017\uffc8\022\uffc8\025\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8" +
    "\043\uffc8\046\uffc8\047\uffc8\001\002\000\050\004\uffc5\006" +
    "\uffc5\007\uffc5\014\uffc5\017\uffc5\022\uffc5\025\072\026\074" +
    "\027\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\041\uffc5\043\uffc5\046\uffc5\047\uffc5\001\002\000\050" +
    "\004\uffc9\006\uffc9\007\uffc9\014\uffc9\017\uffc9\022\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\041\uffc9\043\uffc9\046\uffc9\047\uffc9\001" +
    "\002\000\050\004\uffc7\006\uffc7\007\uffc7\014\uffc7\017\uffc7" +
    "\022\uffc7\025\072\026\074\027\uffc7\031\uffc7\032\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\043\uffc7\046\uffc7" +
    "\047\uffc7\001\002\000\022\025\060\026\061\040\057\053" +
    "\041\057\053\060\062\061\056\064\066\001\002\000\050" +
    "\004\uffd6\006\uffd6\007\uffd6\014\uffd6\017\uffd6\022\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\041\uffd6\043\uffd6\046\uffd6\047\uffd6\001" +
    "\002\000\020\006\075\014\073\025\072\026\074\027\071" +
    "\041\uffd4\046\uffd4\001\002\000\022\025\060\026\061\040" +
    "\057\053\041\057\053\060\062\061\056\064\066\001\002" +
    "\000\016\006\075\014\073\025\072\026\074\027\071\043" +
    "\110\001\002\000\054\004\uffd1\006\uffd1\007\uffd1\014\uffd1" +
    "\017\uffd1\022\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\032" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\046\uffd1\047\uffd1\051\uffd1\001\002\000\050\004" +
    "\uffca\006\uffca\007\uffca\014\uffca\017\uffca\022\uffca\025\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\041\uffca\043\uffca\046\uffca\047\uffca\001\002" +
    "\000\050\004\uffcb\006\uffcb\007\uffcb\014\uffcb\017\uffcb\022" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\041\uffcb\043\uffcb\046\uffcb\047" +
    "\uffcb\001\002\000\016\006\075\014\073\025\072\026\074" +
    "\027\071\041\114\001\002\000\050\004\uffcc\006\uffcc\007" +
    "\uffcc\014\uffcc\017\uffcc\022\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\031\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041" +
    "\uffcc\043\uffcc\046\uffcc\047\uffcc\001\002\000\024\015\116" +
    "\025\060\026\061\040\115\053\041\057\053\060\062\061" +
    "\056\064\066\001\002\000\024\015\116\025\060\026\061" +
    "\040\115\053\041\057\053\060\062\061\056\064\066\001" +
    "\002\000\010\004\137\017\136\022\135\001\002\000\030" +
    "\006\075\014\073\025\072\026\074\027\071\031\123\032" +
    "\125\034\124\035\122\036\121\037\126\001\002\000\022" +
    "\025\060\026\061\040\057\053\041\057\053\060\062\061" +
    "\056\064\066\001\002\000\022\025\060\026\061\040\057" +
    "\053\041\057\053\060\062\061\056\064\066\001\002\000" +
    "\022\025\060\026\061\040\057\053\041\057\053\060\062" +
    "\061\056\064\066\001\002\000\022\025\060\026\061\040" +
    "\057\053\041\057\053\060\062\061\056\064\066\001\002" +
    "\000\022\025\060\026\061\040\057\053\041\057\053\060" +
    "\062\061\056\064\066\001\002\000\022\025\060\026\061" +
    "\040\057\053\041\057\053\060\062\061\056\064\066\001" +
    "\002\000\026\004\uffba\006\075\007\uffba\014\073\017\uffba" +
    "\022\uffba\025\072\026\074\027\071\041\uffba\001\002\000" +
    "\026\004\uffbf\006\075\007\uffbf\014\073\017\uffbf\022\uffbf" +
    "\025\072\026\074\027\071\041\uffbf\001\002\000\026\004" +
    "\uffbd\006\075\007\uffbd\014\073\017\uffbd\022\uffbd\025\072" +
    "\026\074\027\071\041\uffbd\001\002\000\026\004\uffbe\006" +
    "\075\007\uffbe\014\073\017\uffbe\022\uffbe\025\072\026\074" +
    "\027\071\041\uffbe\001\002\000\026\004\uffbc\006\075\007" +
    "\uffbc\014\073\017\uffbc\022\uffbc\025\072\026\074\027\071" +
    "\041\uffbc\001\002\000\026\004\uffbb\006\075\007\uffbb\014" +
    "\073\017\uffbb\022\uffbb\025\072\026\074\027\071\041\uffbb" +
    "\001\002\000\022\012\052\021\043\023\020\024\042\044" +
    "\011\047\050\053\041\057\053\001\002\000\024\015\116" +
    "\025\060\026\061\040\115\053\041\057\053\060\062\061" +
    "\056\064\066\001\002\000\024\015\116\025\060\026\061" +
    "\040\115\053\041\057\053\060\062\061\056\064\066\001" +
    "\002\000\014\004\uffc1\007\uffc1\017\uffc1\022\uffc1\041\uffc1" +
    "\001\002\000\014\004\uffc0\007\uffc0\017\uffc0\022\uffc0\041" +
    "\uffc0\001\002\000\026\010\143\012\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\044\uffdf\045\uffdf\047\uffdf\053\uffdf\057\uffdf\001" +
    "\002\000\022\012\052\021\043\023\020\024\042\044\011" +
    "\047\050\053\041\057\053\001\002\000\026\010\uffe0\012" +
    "\uffe0\021\uffe0\023\uffe0\024\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\053\uffe0\057\uffe0\001\002\000\014\004\uffc2\007\uffc2\017" +
    "\uffc2\022\uffc2\041\uffc2\001\002\000\010\004\137\017\136" +
    "\041\150\001\002\000\032\006\075\014\073\025\072\026" +
    "\074\027\071\031\123\032\125\034\124\035\122\036\121" +
    "\037\126\041\114\001\002\000\014\004\uffc3\007\uffc3\017" +
    "\uffc3\022\uffc3\041\uffc3\001\002\000\026\010\uffe1\012\uffe1" +
    "\021\uffe1\023\uffe1\024\uffe1\044\uffe1\045\uffe1\047\uffe1\053" +
    "\uffe1\057\uffe1\001\002\000\022\025\060\026\061\040\057" +
    "\053\041\057\053\060\062\061\056\064\066\001\002\000" +
    "\016\006\075\014\073\025\072\026\074\027\071\047\154" +
    "\001\002\000\026\010\uffe3\012\uffe3\021\uffe3\023\uffe3\024" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\053\uffe3\057\uffe3\001\002" +
    "\000\026\010\uffdd\012\uffdd\021\uffdd\023\uffdd\024\uffdd\044" +
    "\uffdd\045\uffdd\047\uffdd\053\uffdd\057\uffdd\001\002\000\016" +
    "\006\075\014\073\025\072\026\074\027\071\047\157\001" +
    "\002\000\026\010\uffdc\012\uffdc\021\uffdc\023\uffdc\024\uffdc" +
    "\044\uffdc\045\uffdc\047\uffdc\053\uffdc\057\uffdc\001\002\000" +
    "\010\004\137\007\161\017\136\001\002\000\022\012\052" +
    "\021\043\023\020\024\042\044\011\047\050\053\041\057" +
    "\053\001\002\000\026\010\uffde\012\uffde\021\uffde\023\uffde" +
    "\024\uffde\044\uffde\045\uffde\047\uffde\053\uffde\057\uffde\001" +
    "\002\000\004\002\001\001\002\000\004\040\165\001\002" +
    "\000\012\020\166\041\ufffb\047\ufffb\057\167\001\002\000" +
    "\012\020\166\041\ufffb\047\ufffb\057\167\001\002\000\006" +
    "\046\201\050\202\001\002\000\006\041\ufffd\047\ufffd\001" +
    "\002\000\006\041\173\047\172\001\002\000\012\020\166" +
    "\041\ufffb\047\ufffb\057\167\001\002\000\004\050\174\001" +
    "\002\000\010\005\030\013\026\016\176\001\002\000\012" +
    "\011\ufffe\023\ufffe\044\ufffe\047\ufffe\001\002\000\012\011" +
    "\ufff2\023\ufff2\044\ufff2\047\ufff2\001\002\000\012\011\ufff3" +
    "\023\ufff3\044\ufff3\047\ufff3\001\002\000\006\041\ufffc\047" +
    "\ufffc\001\002\000\012\020\166\041\ufffb\047\ufffb\057\167" +
    "\001\002\000\006\005\030\013\026\001\002\000\006\041" +
    "\ufffa\047\ufffa\001\002\000\010\041\ufff1\042\205\047\ufff1" +
    "\001\002\000\006\043\206\060\207\001\002\000\006\041" +
    "\ufff0\047\ufff0\001\002\000\004\043\210\001\002\000\006" +
    "\041\uffef\047\uffef\001\002\000\006\041\ufff9\047\ufff9\001" +
    "\002\000\006\041\ufff8\047\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\004\003\005\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\007\001\001\000\016\003\016\004\014\012\011\013" +
    "\012\014\015\016\013\001\001\000\004\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\021\001\001\000\004\026" +
    "\024\001\001\000\002\001\001\000\006\006\030\007\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\045\015\043" +
    "\016\044\017\050\020\046\001\001\000\002\001\001\000" +
    "\012\017\066\020\062\021\157\032\117\001\001\000\010" +
    "\017\066\020\062\032\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\066\020\062\021" +
    "\116\032\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\066\020\062\022\064\032\067\001\001\000" +
    "\002\001\001\000\010\017\066\020\062\032\112\001\001" +
    "\000\010\017\066\020\062\032\111\001\001\000\010\017" +
    "\066\020\062\032\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\066" +
    "\020\062\032\101\001\001\000\010\017\066\020\062\032" +
    "\100\001\001\000\010\017\066\020\062\032\077\001\001" +
    "\000\010\017\066\020\062\032\076\001\001\000\010\017" +
    "\066\020\062\032\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\066\020\062\032\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\066\020\062\032" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\066\020\062\021\145\032\146\001\001" +
    "\000\012\017\066\020\062\021\144\032\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\066\020\062" +
    "\032\133\001\001\000\010\017\066\020\062\032\132\001" +
    "\001\000\010\017\066\020\062\032\131\001\001\000\010" +
    "\017\066\020\062\032\130\001\001\000\010\017\066\020" +
    "\062\032\127\001\001\000\010\017\066\020\062\032\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\045\015\141\016\044\017\050\020\046\001" +
    "\001\000\012\017\066\020\062\021\140\032\117\001\001" +
    "\000\012\017\066\020\062\021\137\032\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\045\015\143\016\044\017\050\020\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\066\020\062\032\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\045\015\161\016\044" +
    "\017\050\020\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\167\001\001\000\004" +
    "\005\211\001\001\000\002\001\001\000\004\031\170\001" +
    "\001\000\002\001\001\000\004\005\177\001\001\000\004" +
    "\010\174\001\001\000\004\006\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\210\001\001\000\006\006\203\011\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= func_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_def ::= header local_def_list block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= T_fun T_id T_lpar fpar_def semicolon_fpar_def_list T_rpar ret_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // semicolon_fpar_def_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semicolon_fpar_def_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // semicolon_fpar_def_list ::= semicolon_fpar_def_list T_semicolon fpar_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semicolon_fpar_def_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fpar_def ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fpar_def ::= T_id T_colon fpar_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fpar_def ::= T_id T_comma fpar_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fpar_def ::= T_ref fpar_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= T_int 
            {
              Object RESULT =null;
		 RESULT = BasicType.Int; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= T_char 
            {
              Object RESULT =null;
		 RESULT = BasicType.Char; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= type T_lbracket T_num T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ret_type ::= T_colon data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ret_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ret_type ::= T_colon T_nothing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ret_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fpar_type ::= data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fpar_type ::= data_type T_lbracket T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fpar_type ::= data_type T_lbracket T_num T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_def_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // local_def_list ::= local_def_list local_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // local_def ::= func_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // local_def ::= func_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // local_def ::= var_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_def ::= T_var T_id comma_id_list T_colon type T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comma_id_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_id_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comma_id_list ::= comma_id_list comma_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_id_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comma_id ::= T_comma T_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_id",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // func_decl ::= header T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= l_value T_larrow expr T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= func_call T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= T_if cond T_then stmt T_else stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= T_if cond T_then stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= T_while cond T_do stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= T_return T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= T_return expr T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= var_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block ::= T_lcurlybracket stmt_list T_rcurlybracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // func_call ::= T_id T_lpar T_rpar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // func_call ::= T_id T_lpar func_call_expr T_rpar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // func_call_expr ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // func_call_expr ::= func_call_expr T_comma expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // l_value ::= T_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // l_value ::= T_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l_value ::= l_value T_lbracket expr T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= T_num 
            {
              Expr RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Integer num = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumConst(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= T_charconst 
            {
              Expr RESULT =null;
		int charconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Character charconst = (java.lang.Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConst(charconst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= l_value 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= func_call 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= T_lpar expr T_rpar 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= T_plus expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= T_minus expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr T_plus expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOp(BinOp.Operator.PLUS, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr T_minus expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOp(BinOp.Operator.MINUS, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr T_times expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOp(BinOp.Operator.TIMES, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr T_div expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOp(BinOp.Operator.DIV, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr T_mod expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinOp(BinOp.Operator.MOD, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= comments 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= T_lpar cond T_rpar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= T_not cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= cond T_and cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond ::= cond T_or cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond ::= expr T_equals expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond ::= expr T_hashtag expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond ::= expr T_less expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond ::= expr T_greater expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond ::= expr T_lessequal expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond ::= expr T_moreequal expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
