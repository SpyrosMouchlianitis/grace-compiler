
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.hua.dit;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\010\000\002\004\012\000\002\005\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\006\003\000\002\006\003\000\002\007\006\000\002" +
    "\010\004\000\002\010\004\000\002\011\003\000\002\011" +
    "\005\000\002\011\006\000\002\012\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\007\000" +
    "\002\013\011\000\002\014\004\000\002\015\003\000\002" +
    "\015\006\000\002\015\003\000\002\015\004\000\002\015" +
    "\010\000\002\015\006\000\002\015\006\000\002\015\004" +
    "\000\002\015\005\000\002\016\005\000\002\017\005\000" +
    "\002\017\006\000\002\023\003\000\002\023\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\006\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\004\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\022\005\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\011\004\001\002\000\004\025\163\001" +
    "\002\000\004\002\162\001\002\000\004\002\000\001\002" +
    "\000\010\011\004\023\010\046\ufff0\001\002\000\004\025" +
    "\143\001\002\000\004\046\uffef\001\002\000\004\046\uffed" +
    "\001\002\000\004\046\uffee\001\002\000\012\011\004\023" +
    "\010\046\ufff0\051\142\001\002\000\004\046\016\001\002" +
    "\000\020\012\030\021\022\024\021\025\031\046\016\051" +
    "\026\063\020\001\002\000\006\002\uffff\046\uffff\001\002" +
    "\000\050\006\uffda\007\uffda\014\uffda\022\uffda\026\uffda\027" +
    "\uffda\030\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\043\uffda\044\uffda\045\uffda\050\uffda\051\uffda\053" +
    "\uffda\001\002\000\032\004\076\015\074\017\075\025\031" +
    "\026\034\027\037\042\073\055\035\061\036\062\042\063" +
    "\020\064\044\001\002\000\026\025\031\026\034\027\037" +
    "\042\033\051\134\055\035\061\036\062\042\063\020\064" +
    "\044\001\002\000\004\047\133\001\002\000\006\010\uffe7" +
    "\047\uffe7\001\002\000\006\044\064\053\130\001\002\000" +
    "\006\010\uffe9\047\uffe9\001\002\000\004\051\127\001\002" +
    "\000\032\004\076\015\074\017\075\025\031\026\034\027" +
    "\037\042\073\055\035\061\036\062\042\063\020\064\044" +
    "\001\002\000\052\006\uffdb\007\uffdb\014\uffdb\022\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\042\032\043\uffdb\044\uffdb\045\uffdb\050" +
    "\uffdb\051\uffdb\053\uffdb\001\002\000\026\025\031\026\034" +
    "\027\037\042\033\043\041\055\035\061\036\062\042\063" +
    "\020\064\044\001\002\000\024\025\031\026\034\027\037" +
    "\042\033\055\035\061\036\062\042\063\020\064\044\001" +
    "\002\000\024\025\031\026\034\027\037\042\033\055\035" +
    "\061\036\062\042\063\020\064\044\001\002\000\044\006" +
    "\uffd4\007\uffd4\014\uffd4\022\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\043" +
    "\uffd4\045\uffd4\050\uffd4\051\uffd4\001\002\000\044\006\uffd8" +
    "\007\uffd8\014\uffd8\022\uffd8\026\uffd8\027\uffd8\030\uffd8\032" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\043\uffd8" +
    "\045\uffd8\050\uffd8\051\uffd8\001\002\000\024\025\031\026" +
    "\034\027\037\042\033\055\035\061\036\062\042\063\020" +
    "\064\044\001\002\000\046\006\uffd6\007\uffd6\014\uffd6\022" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\043\uffd6\044\064\045\uffd6\050" +
    "\uffd6\051\uffd6\001\002\000\044\006\uffdf\007\uffdf\014\uffdf" +
    "\022\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf\045\uffdf\050\uffdf" +
    "\051\uffdf\001\002\000\044\006\uffd7\007\uffd7\014\uffd7\022" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\043\uffd7\045\uffd7\050\uffd7\051" +
    "\uffd7\001\002\000\006\043\062\050\061\001\002\000\044" +
    "\006\uffcb\007\uffcb\014\uffcb\022\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\043\uffcb\045\uffcb\050\uffcb\051\uffcb\001\002\000\044\006" +
    "\uffd5\007\uffd5\014\uffd5\022\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\043" +
    "\uffd5\045\uffd5\050\uffd5\051\uffd5\001\002\000\020\006\053" +
    "\014\050\026\051\027\052\030\047\043\uffdd\050\uffdd\001" +
    "\002\000\024\025\031\026\034\027\037\042\033\055\035" +
    "\061\036\062\042\063\020\064\044\001\002\000\024\025" +
    "\031\026\034\027\037\042\033\055\035\061\036\062\042" +
    "\063\020\064\044\001\002\000\024\025\031\026\034\027" +
    "\037\042\033\055\035\061\036\062\042\063\020\064\044" +
    "\001\002\000\024\025\031\026\034\027\037\042\033\055" +
    "\035\061\036\062\042\063\020\064\044\001\002\000\024" +
    "\025\031\026\034\027\037\042\033\055\035\061\036\062" +
    "\042\063\020\064\044\001\002\000\044\006\uffcd\007\uffcd" +
    "\014\uffcd\022\uffcd\026\051\027\052\030\uffcd\032\uffcd\033" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd\045\uffcd" +
    "\050\uffcd\051\uffcd\001\002\000\044\006\uffcf\007\uffcf\014" +
    "\uffcf\022\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\045\uffcf\050" +
    "\uffcf\051\uffcf\001\002\000\044\006\uffd0\007\uffd0\014\uffd0" +
    "\022\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\045\uffd0\050\uffd0" +
    "\051\uffd0\001\002\000\044\006\uffcc\007\uffcc\014\uffcc\022" +
    "\uffcc\026\051\027\052\030\uffcc\032\uffcc\033\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\043\uffcc\045\uffcc\050\uffcc\051" +
    "\uffcc\001\002\000\044\006\uffce\007\uffce\014\uffce\022\uffce" +
    "\026\051\027\052\030\uffce\032\uffce\033\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\043\uffce\045\uffce\050\uffce\051\uffce" +
    "\001\002\000\024\025\031\026\034\027\037\042\033\055" +
    "\035\061\036\062\042\063\020\064\044\001\002\000\044" +
    "\006\uffde\007\uffde\014\uffde\022\uffde\026\uffde\027\uffde\030" +
    "\uffde\032\uffde\033\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\043\uffde\045\uffde\050\uffde\051\uffde\001\002\000\020\006" +
    "\053\014\050\026\051\027\052\030\047\043\uffdc\050\uffdc" +
    "\001\002\000\024\025\031\026\034\027\037\042\033\055" +
    "\035\061\036\062\042\063\020\064\044\001\002\000\016" +
    "\006\053\014\050\026\051\027\052\030\047\045\066\001" +
    "\002\000\050\006\uffd9\007\uffd9\014\uffd9\022\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\043\uffd9\044\uffd9\045\uffd9\050\uffd9\051\uffd9" +
    "\053\uffd9\001\002\000\044\006\uffd1\007\uffd1\014\uffd1\022" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\043\uffd1\045\uffd1\050\uffd1\051" +
    "\uffd1\001\002\000\044\006\uffd2\007\uffd2\014\uffd2\022\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\032\uffd2\033\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\043\uffd2\045\uffd2\050\uffd2\051\uffd2" +
    "\001\002\000\016\006\053\014\050\026\051\027\052\030" +
    "\047\043\072\001\002\000\044\006\uffd3\007\uffd3\014\uffd3" +
    "\022\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\033\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3\045\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\032\004\076\015\074\017\075\025" +
    "\031\026\034\027\037\042\073\055\035\061\036\062\042" +
    "\063\020\064\044\001\002\000\032\004\076\015\074\017" +
    "\075\025\031\026\034\027\037\042\073\055\035\061\036" +
    "\062\042\063\020\064\044\001\002\000\032\004\076\015" +
    "\074\017\075\025\031\026\034\027\037\042\073\055\035" +
    "\061\036\062\042\063\020\064\044\001\002\000\032\004" +
    "\076\015\074\017\075\025\031\026\034\027\037\042\073" +
    "\055\035\061\036\062\042\063\020\064\044\001\002\000" +
    "\004\022\115\001\002\000\030\006\053\014\050\026\051" +
    "\027\052\030\047\032\103\033\105\035\104\036\102\037" +
    "\101\040\106\001\002\000\024\025\031\026\034\027\037" +
    "\042\033\055\035\061\036\062\042\063\020\064\044\001" +
    "\002\000\024\025\031\026\034\027\037\042\033\055\035" +
    "\061\036\062\042\063\020\064\044\001\002\000\024\025" +
    "\031\026\034\027\037\042\033\055\035\061\036\062\042" +
    "\063\020\064\044\001\002\000\024\025\031\026\034\027" +
    "\037\042\033\055\035\061\036\062\042\063\020\064\044" +
    "\001\002\000\024\025\031\026\034\027\037\042\033\055" +
    "\035\061\036\062\042\063\020\064\044\001\002\000\024" +
    "\025\031\026\034\027\037\042\033\055\035\061\036\062" +
    "\042\063\020\064\044\001\002\000\022\006\053\007\uffc1" +
    "\014\050\022\uffc1\026\051\027\052\030\047\043\uffc1\001" +
    "\002\000\022\006\053\007\uffc6\014\050\022\uffc6\026\051" +
    "\027\052\030\047\043\uffc6\001\002\000\022\006\053\007" +
    "\uffc4\014\050\022\uffc4\026\051\027\052\030\047\043\uffc4" +
    "\001\002\000\022\006\053\007\uffc5\014\050\022\uffc5\026" +
    "\051\027\052\030\047\043\uffc5\001\002\000\022\006\053" +
    "\007\uffc3\014\050\022\uffc3\026\051\027\052\030\047\043" +
    "\uffc3\001\002\000\022\006\053\007\uffc2\014\050\022\uffc2" +
    "\026\051\027\052\030\047\043\uffc2\001\002\000\020\012" +
    "\030\021\022\024\021\025\031\046\016\051\026\063\020" +
    "\001\002\000\006\010\117\047\uffe4\001\002\000\020\012" +
    "\030\021\022\024\021\025\031\046\016\051\026\063\020" +
    "\001\002\000\006\010\uffe5\047\uffe5\001\002\000\010\007" +
    "\uffc8\022\uffc8\043\uffc8\001\002\000\010\007\uffc7\022\uffc7" +
    "\043\uffc7\001\002\000\010\007\uffc9\022\uffc9\043\uffc9\001" +
    "\002\000\004\043\126\001\002\000\032\006\053\014\050" +
    "\026\051\027\052\030\047\032\103\033\105\035\104\036" +
    "\102\037\101\040\106\043\072\001\002\000\010\007\uffca" +
    "\022\uffca\043\uffca\001\002\000\006\010\uffe6\047\uffe6\001" +
    "\002\000\024\025\031\026\034\027\037\042\033\055\035" +
    "\061\036\062\042\063\020\064\044\001\002\000\016\006" +
    "\053\014\050\026\051\027\052\030\047\051\132\001\002" +
    "\000\006\010\uffe8\047\uffe8\001\002\000\012\002\uffe0\010" +
    "\uffe0\046\uffe0\047\uffe0\001\002\000\006\010\uffe2\047\uffe2" +
    "\001\002\000\016\006\053\014\050\026\051\027\052\030" +
    "\047\051\136\001\002\000\006\010\uffe1\047\uffe1\001\002" +
    "\000\004\007\140\001\002\000\020\012\030\021\022\024" +
    "\021\025\031\046\016\051\026\063\020\001\002\000\006" +
    "\010\uffe3\047\uffe3\001\002\000\004\046\uffea\001\002\000" +
    "\006\050\144\052\145\001\002\000\004\025\156\001\002" +
    "\000\006\005\150\013\146\001\002\000\016\011\ufff8\023" +
    "\ufff8\043\ufff8\044\ufff8\046\ufff8\051\ufff8\001\002\000\004" +
    "\051\155\001\002\000\016\011\ufff7\023\ufff7\043\ufff7\044" +
    "\ufff7\046\ufff7\051\ufff7\001\002\000\004\044\152\001\002" +
    "\000\004\061\153\001\002\000\004\045\154\001\002\000" +
    "\004\051\ufff6\001\002\000\004\046\uffec\001\002\000\004" +
    "\052\157\001\002\000\006\005\150\013\146\001\002\000" +
    "\004\051\161\001\002\000\004\046\uffeb\001\002\000\004" +
    "\002\001\001\002\000\004\042\164\001\002\000\012\020" +
    "\166\025\165\043\ufffc\051\ufffc\001\002\000\006\050\202" +
    "\052\203\001\002\000\012\020\166\025\165\043\ufffc\051" +
    "\ufffc\001\002\000\006\043\171\051\170\001\002\000\010" +
    "\020\166\025\165\043\ufffc\001\002\000\004\052\172\001" +
    "\002\000\010\005\150\013\146\016\174\001\002\000\012" +
    "\011\ufffe\023\ufffe\046\ufffe\051\ufffe\001\002\000\012\011" +
    "\ufff4\023\ufff4\046\ufff4\051\ufff4\001\002\000\012\011\ufff5" +
    "\023\ufff5\046\ufff5\051\ufff5\001\002\000\004\043\177\001" +
    "\002\000\004\052\172\001\002\000\012\011\ufffd\023\ufffd" +
    "\046\ufffd\051\ufffd\001\002\000\006\043\ufff9\051\ufff9\001" +
    "\002\000\012\020\166\025\165\043\ufffc\051\ufffc\001\002" +
    "\000\006\005\150\013\146\001\002\000\006\043\ufffb\051" +
    "\ufffb\001\002\000\010\043\ufff3\044\206\051\ufff3\001\002" +
    "\000\006\045\210\061\207\001\002\000\004\045\211\001" +
    "\002\000\006\043\ufff2\051\ufff2\001\002\000\006\043\ufff1" +
    "\051\ufff1\001\002\000\006\043\ufffa\051\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\004\003\005\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\010\004\013\012\014\013\011\014\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\010\004\013\012\014\013\011\014" +
    "\012\001\001\000\004\016\016\001\001\000\012\015\022" +
    "\016\023\017\026\020\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\044\020\037\021\077\022\136" +
    "\001\001\000\010\017\044\020\037\021\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\044\020\037\021" +
    "\077\022\076\001\001\000\002\001\001\000\012\017\044" +
    "\020\037\021\045\023\042\001\001\000\010\017\044\020" +
    "\037\021\070\001\001\000\010\017\044\020\037\021\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\044\020\037\021\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\044" +
    "\020\037\021\057\001\001\000\010\017\044\020\037\021" +
    "\056\001\001\000\010\017\044\020\037\021\055\001\001" +
    "\000\010\017\044\020\037\021\054\001\001\000\010\017" +
    "\044\020\037\021\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\044\020\037\021\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\044\020\037\021" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\044\020\037\021\124\022\123\001\001" +
    "\000\012\017\044\020\037\021\077\022\122\001\001\000" +
    "\012\017\044\020\037\021\077\022\121\001\001\000\012" +
    "\017\044\020\037\021\077\022\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\044\020\037\021\113" +
    "\001\001\000\010\017\044\020\037\021\112\001\001\000" +
    "\010\017\044\020\037\021\111\001\001\000\010\017\044" +
    "\020\037\021\110\001\001\000\010\017\044\020\037\021" +
    "\107\001\001\000\010\017\044\020\037\021\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\115\016\023\017\026\020\024\001\001\000\002\001" +
    "\001\000\012\015\117\016\023\017\026\020\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\044\020\037\021" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\140\016\023\017\026" +
    "\020\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\150\007\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\150\007\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\166\001\001\000\002\001\001\000\004\005\200\001\001" +
    "\000\002\001\001\000\004\005\175\001\001\000\004\010" +
    "\172\001\001\000\004\006\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\211\001\001\000\006\006\204\011\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= func_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_def ::= header local_def block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_def",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= T_fun T_id T_lpar fpar_def T_rpar ret_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= T_fun T_id T_lpar fpar_def T_semicolon fpar_def T_rpar ret_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fpar_def ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fpar_def ::= T_id T_colon fpar_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fpar_def ::= T_id T_comma fpar_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fpar_def ::= T_ref fpar_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_type ::= T_int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= T_char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= data_type T_lbracket int_const T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ret_type ::= T_colon data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ret_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ret_type ::= T_colon T_nothing 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ret_type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fpar_type ::= data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fpar_type ::= data_type T_lbracket T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fpar_type ::= data_type T_lbracket int_const T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fpar_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // local_def ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_def ::= func_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_def ::= func_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // local_def ::= var_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_def",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_def ::= T_var T_id T_colon type T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_def ::= T_var T_id T_comma T_id T_colon type T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // func_decl ::= header T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= l_value T_larrow expr T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= func_call T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= T_if cond T_then stmt T_else stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= T_if cond T_then stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= T_while cond T_do stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= T_return T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= T_return expr T_semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block ::= T_lcurlybracket stmt T_rcurlybracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // func_call ::= T_id T_lpar T_rpar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // func_call ::= T_id T_lpar func_call_expr T_rpar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // func_call_expr ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func_call_expr ::= func_call_expr T_comma expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // l_value ::= T_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // l_value ::= string_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // l_value ::= l_value T_lbracket expr T_rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= int_const 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= char_const 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= l_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= T_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= T_lpar expr T_rpar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= T_plus expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= T_minus expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr T_plus expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr T_minus expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr T_times expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr T_div expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr T_mod expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= comments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cond ::= T_lpar cond T_rpar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond ::= T_not cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond ::= T_and cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= T_or cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= expr T_equals expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= expr T_hashtag expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= expr T_less expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= expr T_greater expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= expr T_lessequal expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= expr T_moreequal expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
