import java_cup.runtime.Symbol;

terminal T_and, T_char, T_div, T_do, T_else, T_fun, T_if, T_int, T_mod, T_not, T_nothing, T_or, T_ref, T_return, T_then;
terminal T_var, T_while, T_id , T_plus , T_minus, T_times, T_divide, T_hashtag , T_equals , T_different, T_less  , T_greater;
terminal T_lessequal, T_moreequal, T_num, T_lpar, T_rpar, T_lbracket, T_rbracket, T_lcurlybracket, T_rcurlybracket, T_comma, T_semicolon;
terminal T_colon, T_larrow, T_escapedchar, T_string, T_comment, T_multilinecomment, T_delim, T_charconst;

non terminal program, func_def, header, fpar_def, data_type, type, ret_type, fpar_type, local_def, var_def, func_decl, stmt,
             block, func_call, l_value, expr, cond, func_call_expr, stmt_list, local_def_list, comma_id_list, comma_id, id_list,
             and_or, semicolon_fpar_def_list;
terminal id, int_const, char_const, string_literal, comments;

precedence left T_times, T_div, T_mod;
precedence left T_plus, T_minus;
precedence left T_or, T_and, T_not;
precedence nonassoc comments;

start with program;

program ::= func_def;

func_def ::= header local_def_list block;

header ::= T_fun T_id T_lpar fpar_def semicolon_fpar_def_list T_rpar ret_type;

semicolon_fpar_def_list ::=
                         | semicolon_fpar_def_list T_semicolon fpar_def
                         ;

fpar_def ::=
          | T_id T_colon fpar_type
          | T_id T_comma fpar_def
          | T_ref fpar_def
          ;

data_type ::= T_int
           | T_char
           ;

type ::= data_type
      | type T_lbracket T_num T_rbracket
      ;

ret_type ::= T_colon data_type //colon should be at header but is used here to avoid conflict with data_type
          | T_colon T_nothing
          ;

fpar_type ::= data_type
           | data_type T_lbracket T_rbracket
           | data_type T_lbracket T_num T_rbracket
           ;

local_def_list ::=
                | local_def_list local_def
                ;

local_def ::= func_def
           | func_decl
           | var_def
           ;

var_def ::= T_var T_id comma_id_list T_colon type T_semicolon
         ;

comma_id_list ::=
               | comma_id_list comma_id
               ;

comma_id ::= T_comma T_id;

func_decl ::= header T_semicolon;

stmt ::= T_semicolon
      | l_value T_larrow expr T_semicolon
      | block
      | func_call T_semicolon
      | T_if cond T_then stmt T_else stmt
      | T_if cond T_then stmt
      | T_while cond T_do stmt
      | T_return T_semicolon
      | T_return expr T_semicolon
      | var_def
      ;

block ::= T_lcurlybracket stmt_list T_rcurlybracket;

stmt_list ::=
            | stmt_list stmt
            ;

func_call ::= T_id T_lpar T_rpar
           | T_id T_lpar func_call_expr T_rpar
           ;

func_call_expr ::= expr
                | func_call_expr T_comma expr
                ;

l_value ::= T_id
         | T_string
         | l_value T_lbracket expr T_rbracket
         ;

expr ::= T_num
      | T_charconst
      | l_value
      | func_call
      | T_lpar expr T_rpar
      | T_plus expr
      | T_minus expr
      | expr T_plus expr
      | expr T_minus expr
      | expr T_times expr
      | expr T_div expr
      | expr T_mod expr
      | comments
      ;

cond ::= T_lpar cond T_rpar
      | T_not cond
      | cond T_and cond
      | cond T_or cond
      | expr T_equals expr
      | expr T_hashtag expr
      | expr T_less expr
      | expr T_greater expr
      | expr T_lessequal expr
      | expr T_moreequal expr
      ;

id ::= T_id;

int_const ::= T_num;

string_literal ::= T_string;

char_const ::= T_charconst;

comments ::= T_comment
          | T_multilinecomment
          ;